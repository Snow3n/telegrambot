'use strict';
const express = require('express');
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const Order = require('./model');
const mongoose = require('mongoose');
const { getBodyText } = require('telegraf-inline-menu/dist/source/body');
require('dotenv').config();

// db init
const db_url = 'mongodb+srv://su_admin:llonelinesss16@cluster0.rilpd.mongodb.net/Supp?retryWrites=true&w=majority';
mongoose
    .connect(db_url, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useCreateIndex: true
    })
    .catch(e => {
        console.error('Connection error', e.message)
    })

const db = mongoose.connection
// invite links for chats
const chat_invite_links = ['https://t.me/joinchat/dDSP_btKULljMmNi', 'https://t.me/joinchat/m78OZJyS_3tiNGIy', 'https://t.me/joinchat/sqU87QB2qdplMWFi',];
const chats_id = ['-569193560', '']
// keyboards init
const exit_keyboard = Markup.keyboard(['exit']).resize();
const remove_keyboard = Markup.removeKeyboard();
const main_keyboard = Markup.keyboard([
    ['üóí –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'üóÑ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è'],
    ['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'],
    ['üíé –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', 'exit'],
    ['üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
]).resize();

const app = express(); // server init
const bot = new Telegraf(process.env.TOKEN); // bot init
// pay invoice
const getInvoice = (id, price) => {
    const invoice = {
        chat_id: id,
        provider_token: process.env.PROVIDER_TOKEN,
        start_parameter: 'get_access',
        title: 'Telegram bot',
        description: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞',
        currency: 'UAH',
        prices: [{ label: `Telegram bot`, amount: (Number(price) * 0.08 + Number(price)) * 100 }],
        photo_url: 'https://picsum.photos/300/200',
        photo_width: 300,
        photo_height: 200,
        payload: {
            unique_id: `${id}_${Number(new Date())}`,
            provider_token: process.env.PROVIDER_TOKEN
        }
    }
    return invoice
}
// scenes section
const confirmScene = new Scenes.BaseScene('confirm');
confirmScene.enter(ctx => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∑–∞–¥–∞–Ω–∏—è', exit_keyboard);
});
confirmScene.hears('exit', ctx => ctx.scene.leave());
confirmScene.on('text', async ctx => {
    Order.findByIdAndUpdate(ctx.message.text ,{paid: true}).then(data => {
        ctx.reply('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã...');
    });
});
confirmScene.leave(ctx => ctx.reply("–í—ã—Ö–æ–∂—É", main_keyboard));

// payout
const payoutScene = new Scenes.BaseScene("payout");
payoutScene.enter(ctx => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", exit_keyboard);
})
payoutScene.hears("exit", ctx => ctx.scene.leave());
payoutScene.on('text', async ctx => {
    try {
        if (Number(ctx.message.text) && ctx.message.text.length === 16) {
            let money = 0;
            await Order.find({ performerId: ctx.message.from.id, status: false, moneyOut: false }).then(data => {
                data.map(async d => {
                    money += Number(d.price);
                    await Order.findByIdAndUpdate(d._id, { moneyOut: true })
                })
                bot.telegram.sendMessage('@payouts_bot', `id: ${ctx.message.from.id}\n–∫–∞—Ä—Ç–∞: ${ctx.message.text}\n—Å—É–º–º–∞: ${money}`);
                ctx.reply("–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤");
            });
            ctx.scene.leave();
        }
        else {
            ctx.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã');
        }
    }
    catch (err) {
        ctx.reply('–û—à–∏–±–∫–∞');
    }
})
payoutScene.leave(ctx => ctx.reply("–í—ã—Ö–æ–∂—É", main_keyboard));
// pay task
const payScene = new Scenes.BaseScene("pay");
payScene.enter(ctx => {
    ctx.reply("–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É\n–µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å 'exit'", { ...exit_keyboard, ...Markup.inlineKeyboard([Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å', '–û–ø–ª–∞—Ç–∏—Ç—å')]) });
});
payScene.action('–û–ø–ª–∞—Ç–∏—Ç—å', ctx => {
    try {
        Order.find({ userId: ctx.callbackQuery.from.id, status: true, paid: false }).then(data => {
            data.map(async (d) => {
                if (d.imageId) {
                    const link = await ctx.telegram.getFile(d.imageId);
                    ctx.replyWithPhoto(`${link.file_id}`, {
                        caption: `–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                        \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                        \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                        \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                        \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                        \n–¶–µ–Ω–∞: <b>${d.price}</b>
                        \n${d._id}`,
                        parse_mode: "HTML",
                        ...Markup.inlineKeyboard([Markup.button.callback('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å')]),
                    })
                } else {
                    ctx.reply(`–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                    \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                \n–¶–µ–Ω–∞: <b>${d.price}</b>
                \n${d._id}`, {
                        parse_mode: "HTML",
                        ...Markup.inlineKeyboard([Markup.button.callback('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å')]),
                    });
                }
            });
        })
    }
    catch (err) {
        ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
});
payScene.action('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å', ctx => {
    if(ctx.callbackQuery.message.photo){
        ctx.session.id = ctx.callbackQuery.message.caption.slice(ctx.callbackQuery.message.caption.length - 24, ctx.callbackQuery.message.caption.length);
    }
    else{
        ctx.session.id = ctx.callbackQuery.message.text.slice(ctx.callbackQuery.message.text.length - 24, ctx.callbackQuery.message.text.length);
    }
    Order.findById(ctx.session.id).then(data => {
        // ctx.replyWithInvoice(getInvoice(ctx.callbackQuery.from.id, data.price));
        ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ ${data.price} –≥—Ä–Ω –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: \n
        4441114423581402 –º–æ–Ω–æ–±–∞–Ω–∫\n
        5168757333449983 –ø—Ä–∏–≤–∞—Ç\n
        –í–ê–ñ–ù–û!!! \n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –æ—Å—Ç–∞–≤—å—Ç–µ id –∑–∞–¥–∞—á–∏ ${ctx.session.id}`);
        ctx.scene.leave();
    })
});
payScene.hears("exit", ctx => ctx.scene.leave());
payScene.on('text', ctx => { });
payScene.leave(ctx => ctx.reply("–í—ã—Ö–æ–∂—É", main_keyboard));
// close task
const closeScene = new Scenes.BaseScene("close");
closeScene.enter(ctx => {
    ctx.reply("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n–µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å 'exit'", { ...exit_keyboard, ...Markup.inlineKeyboard([Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', '–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É')]) });
});
closeScene.action('–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', ctx => {
    try {
        Order.find({ userId: ctx.callbackQuery.from.id, status: true, paid: true }).then(data => {
            data.map(async (d) => {
                if (d.imageId) {
                    const link = await ctx.telegram.getFile(d.imageId);
                    ctx.replyWithPhoto(`${link.file_id}`, {
                        caption: `–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                        \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                        \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                        \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                        \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                        \n–¶–µ–Ω–∞: <b>${d.price}</b>
                        \n${d._id}`,
                        parse_mode: "HTML",
                        ...Markup.inlineKeyboard([Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')]),
                    })
                } else {
                    ctx.reply(`–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                    \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                    \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                    \n–¶–µ–Ω–∞: <b>${d.price}</b>
                    \n${d._id}`, {
                        parse_mode: "HTML",
                        ...Markup.inlineKeyboard([Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')]),
                    });
                }
            });
        });
        Order.find({userId: ctx.callbackQuery.from.id, status: true, paid: false, performerId: undefined}).then(data => {
            data.map(async d => {
                if (d.imageId) {
                    const link = await ctx.telegram.getFile(d.imageId);
                    ctx.replyWithPhoto(`${link.file_id}`, {
                        caption: `–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                        \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                        \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                        \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                        \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                        \n–¶–µ–Ω–∞: <b>${d.price}</b>
                        \n${d._id}`,
                        parse_mode: "HTML",
                        ...Markup.inlineKeyboard([Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É')]),
                    })
                } else {
                    ctx.reply(`–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                    \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                    \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                    \n–¶–µ–Ω–∞: <b>${d.price}</b>
                    \n${d._id}`, {
                        parse_mode: "HTML",
                        ...Markup.inlineKeyboard([Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É')]),
                    });
                }
            })
        })
    }
    catch (err) {
        ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
})
closeScene.action('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', ctx => {
    if(ctx.callbackQuery.message.photo){
        Order.findByIdAndUpdate(ctx.callbackQuery.message.caption.slice(ctx.callbackQuery.message.caption.length - 24, ctx.callbackQuery.message.caption.length), {status: false, moneyOut: false})
        .then(data => {
            ctx.reply("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–¥–∞–Ω–∏–µ", main_keyboard);
            ctx.scene.leave();
        })
    }
    else{
        Order.findByIdAndUpdate(ctx.callbackQuery.message.text.slice(ctx.callbackQuery.message.text.length - 24, ctx.callbackQuery.message.text.length), {status: false, moneyOut: false})
        .then(data => {
            ctx.reply("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–¥–∞–Ω–∏–µ", main_keyboard);
            ctx.scene.leave();
        })
    }
});
closeScene.action('‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', ctx => {
    if(ctx.callbackQuery.message.photo){
        Order.findByIdAndUpdate(ctx.callbackQuery.message.caption.slice(ctx.callbackQuery.message.caption.length - 24, ctx.callbackQuery.message.caption.length), {status: false, moneyOut: true})
        .then(data => {
            ctx.reply("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–¥–∞–Ω–∏–µ", main_keyboard);
            bot.telegram.sendMessage('@payouts_bot', /*ctx.telegram.getFile(data.imageId.file_id) ,*/"–£–î–ê–õ–ò–¢–¨\n\n" + ctx.callbackQuery.message.caption);
            ctx.scene.leave();
        })
    }
    else{
        Order.findByIdAndUpdate(ctx.callbackQuery.message.text.slice(ctx.callbackQuery.message.text.length - 24, ctx.callbackQuery.message.text.length), {status: false, moneyOut: true})
        .then(data => {
            ctx.reply("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–¥–∞–Ω–∏–µ", main_keyboard);
            bot.telegram.sendMessage('@payouts_bot', "–£–î–ê–õ–ò–¢–¨\n\n" + ctx.callbackQuery.message.text);
            ctx.scene.leave();
        })
    }
})
closeScene.hears("exit", ctx => ctx.scene.leave());
closeScene.on('text', ctx => { });
closeScene.leave(ctx => ctx.reply("–í—ã—Ö–æ–∂—É", main_keyboard));
// task name
const nameScene = new Scenes.BaseScene("name");
nameScene.enter((ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", exit_keyboard);
    ctx.session.name = "";
    ctx.session.description = "";
    ctx.session.photo = "";
    ctx.session.deadline = "";
    ctx.session.price = "";
});
nameScene.hears("exit", (ctx) => {
    ctx.reply('–≤—ã—Ö–æ–∂—É', main_keyboard);
    ctx.scene.leave();
});
nameScene.on("text", ctx => {
    ctx.session.name = ctx.message.text;
    return ctx.scene.enter('description');
});
nameScene.on("message", (ctx) => ctx.reply("ü•∫—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±—É–∫–≤—ã..."));
// task description
const descriptionScene = new Scenes.BaseScene("description");
descriptionScene.enter((ctx) => ctx.reply("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"));
descriptionScene.hears("exit", (ctx) => {
    ctx.reply('–≤—ã—Ö–æ–∂—É', main_keyboard);
    ctx.scene.leave();
});

descriptionScene.on("text", ctx => {
    ctx.session.description = ctx.message.text;
    return ctx.scene.enter('photo');
});
descriptionScene.on("message", (ctx) => ctx.reply("ü•∫—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±—É–∫–≤—ã..."));
// task photo
const photoScene = new Scenes.BaseScene("photo");
photoScene.enter((ctx) => ctx.reply("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)", Markup.keyboard(['skip']).oneTime().resize()));
photoScene.hears("exit", (ctx) => {
    ctx.reply('–≤—ã—Ö–æ–∂—É', main_keyboard);
    ctx.scene.leave();
});
photoScene.hears("skip", (ctx) => ctx.scene.enter('deadline'));

photoScene.on("photo", ctx => {
    ctx.session.photo = ctx.message.photo[ctx.message.photo.length - 1];
    return ctx.scene.enter('deadline');
})
photoScene.on("message", (ctx) => ctx.reply("ü•∫—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ç–æ..."));
// task deadline
const deadlineScene = new Scenes.BaseScene("deadline");
deadlineScene.enter((ctx) => ctx.reply("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω", exit_keyboard));
deadlineScene.hears("exit", ctx => {
    ctx.reply('–≤—ã—Ö–æ–∂—É', main_keyboard);
    ctx.scene.leave();
});
deadlineScene.on("text", ctx => {
    ctx.session.deadline = ctx.message.text;
    return ctx.scene.enter('price');
});
deadlineScene.on("message", ctx => ctx.reply("ü•∫—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±—É–∫–≤—ã..."));
// task price
const priceScene = new Scenes.BaseScene("price");
priceScene.enter((ctx) => ctx.reply("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"));
priceScene.leave(ctx => ctx.reply("üëå", main_keyboard));
priceScene.hears("exit", ctx => {
    ctx.reply('–≤—ã—Ö–æ–∂—É', main_keyboard);
    ctx.scene.leave();
});
priceScene.on("text", async (ctx) => {
    if (Number(ctx.message.text) && Number(ctx.message.text) > 0 && Number(ctx.message.text) < 10000) {
        ctx.session.price = ctx.message.text;
        ctx.session.message = `–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${ctx.session.name}</b>, 
    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${ctx.session.description}</b>, 
    \n–î–µ–¥–ª–∞–π–Ω: <b>${ctx.session.deadline}</b>, 
    \n–¶–µ–Ω–∞: <b>${ctx.session.price}</b>`;
        if (ctx.session.photo) {
            ctx.replyWithPhoto(ctx.session.photo.file_id, {
                caption: ctx.session.message,
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                    Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'),
                ])
            })
        } else {
            await ctx.reply(ctx.session.message, {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')])
            });
        }
        return ctx.scene.leave();
    }
    else {
        ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ");
    }
});
priceScene.on("message", ctx => ctx.reply("ü•∫—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±—É–∫–≤—ã..."));

const stage = new Scenes.Stage([nameScene, descriptionScene, photoScene, deadlineScene, priceScene, payScene, closeScene, payoutScene, confirmScene]);

bot.use(session());
bot.use(stage.middleware());
bot.use(Telegraf.log());
// bot actions init
bot.action('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', async (ctx, next) => {
    let id = '';
    if (ctx.session.photo) {
        const order = new Order({
            created: new Date(),
            name: ctx.session.name,
            description: ctx.session.description,
            deadline: ctx.session.deadline,
            imageId: ctx.session.photo.file_id,
            imageUniqId: ctx.session.photo.file_unique_id,
            status: true,
            price: ctx.session.price,
            userId: ctx.callbackQuery.from.id,
            paid: false,
        })
        await order.save().then(data => {
            id = data._id;
        });
        bot.telegram.sendPhoto('@FastCleverFreelance', ctx.session.photo.file_id, {
            caption: `${ctx.session.message} \n\n#${order.name}\n\nid: ${id}`,
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([Markup.button.callback('ü§ù –ë–µ—Ä—É', 'ü§ù –ë–µ—Ä—É')])
        })
    } else {
        const order = new Order({
            created: new Date(),
            name: ctx.session.name,
            description: ctx.session.description,
            deadline: ctx.session.deadline,
            status: true,
            price: ctx.session.price,
            userId: ctx.callbackQuery.from.id,
            paid: false,
        })
        await order.save().then(data => {
            id = data._id
        });
        bot.telegram.sendMessage('@FastCleverFreelance', `${ctx.session.message} \n\n#${order.name}\n\nid: ${id}`, {
            parse_mode: "HTML",
            ...Markup.inlineKeyboard([Markup.button.callback('ü§ù –ë–µ—Ä—É', 'ü§ù –ë–µ—Ä—É')])
        });
    }
});
bot.action('ü§ù –ë–µ—Ä—É', ctx => {
    if (ctx.callbackQuery.message.photo) {
        Order.find({ performerId: ctx.callbackQuery.from.id, status: true }).then(async data => {
            if (data.length > 3) {
                ctx.telegram.sendMessage(ctx.callbackQuery.from.id, "–í—ã —É–∂–µ –≤–∑—è–ª–∏—Å—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–∑—è—Ç—å –Ω–æ–≤—É—é, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.");
            }
            else {
                await Order.findByIdAndUpdate(ctx.callbackQuery.message.caption.slice(ctx.callbackQuery.message.caption.length - 24, ctx.callbackQuery.message.caption.length), { performerId: ctx.callbackQuery.from.id }).then(data => {
                    ctx.editMessageCaption('–í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n' + ctx.callbackQuery.message.caption,/*ctx.callbackQuery.message.chat.id, ctx.callbackQuery.message.message_id, */{...Markup.inlineKeyboard([Markup.button.callback('‚úÖ –ó–∞–±—Ä–∞–ª–∏', '‚úÖ –ó–∞–±—Ä–∞–ª–∏')])});
                    bot.telegram.sendPhoto(`${ctx.callbackQuery.from.id}`,
                        ctx.callbackQuery.message.photo[ctx.callbackQuery.message.photo.length - 1].file_id,
                        { caption: `${ctx.callbackQuery.message.caption}\n\n–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç: \n${bot.telegram.getChatMembersCount(chat_invite_links[0].slice(22, 38)) <= 2 ? chat_invite_links[0] : bot.telegram.getChatMembersCount(chat_invite_links[1].slice(22, 38)) <= 2 ? chat_invite_links[1] : bot.telegram.getChatMembersCount(chat_invite_links[2].slice(22, 38)) <= 2 ? chat_invite_links[2] : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"}`, parse_mode: "HTML" });
                    bot.telegram.sendPhoto(data.userId/*ctx.callbackQuery.message.caption.slice(ctx.callbackQuery.message.caption.length - 10, ctx.callbackQuery.message.caption.length).trim()*/,
                        ctx.callbackQuery.message.photo[ctx.callbackQuery.message.photo.length - 1].file_id,
                        { caption: `${ctx.callbackQuery.message.caption}\n\n@${ctx.callbackQuery.from.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç: \n${chat_invite_links[0]}`, parse_mode: "HTML" });
                });
            }
        })
    }
    else {
        Order.find({ performerId: ctx.callbackQuery.from.id, status: true }).then(async data => {
            if (data.length > 3) {
                ctx.telegram.sendMessage(ctx.callbackQuery.from.id, "–í—ã —É–∂–µ –≤–∑—è–ª–∏—Å—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–∑—è—Ç—å –Ω–æ–≤—É—é, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.");
            }
            else {
                await Order.findByIdAndUpdate(ctx.callbackQuery.message.text.slice(ctx.callbackQuery.message.text.length - 24, ctx.callbackQuery.message.text.length), { performerId: ctx.callbackQuery.from.id }).then(data => {
                    ctx.editMessageText('–í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n' + ctx.callbackQuery.message.text,/*ctx.callbackQuery.message.chat.id, ctx.callbackQuery.message.message_id, */{...Markup.inlineKeyboard([Markup.button.callback('‚úÖ –ó–∞–±—Ä–∞–ª–∏', '‚úÖ –ó–∞–±—Ä–∞–ª–∏')])});
                    bot.telegram.sendMessage(`${ctx.callbackQuery.from.id}`,
                        `${ctx.callbackQuery.message.text}\n\n–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç: \n${bot.telegram.getChatMembersCount(chat_invite_links[0].slice(22, 38)) <= 2 ? chat_invite_links[0] : bot.telegram.getChatMembersCount(chat_invite_links[1].slice(22, 38)) <= 2 ? chat_invite_links[1] : bot.telegram.getChatMembersCount(chat_invite_links[2].slice(22, 38)) <= 2 ? chat_invite_links[2] : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"}`, { parse_mode: "HTML" });
                    bot.telegram.sendMessage(data.userId/*ctx.callbackQuery.message.text.slice(ctx.callbackQuery.message.text.length - 10, ctx.callbackQuery.message.text.length).trim()*/,
                        `${ctx.callbackQuery.message.text}\n\n${ctx.callbackQuery.from.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç: \n${chat_invite_links[0]}`, { parse_mode: "HTML" });
                });
            }
        })
    }
});
bot.hears("üóÑ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", (ctx) => {
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä", Markup.inlineKeyboard([Markup.button.callback('–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', '–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è'), Markup.button.callback('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è')]));
})
bot.action('–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', async ctx => {
    await Order.find({ userId: ctx.callbackQuery.from.id, status: true }).then(data => {
        data.map(async (d) => {
            if (d.imageId) {
                const link = await ctx.telegram.getFile(d.imageId);
                ctx.replyWithPhoto(`${link.file_id}`, {
                    caption: `–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                    \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                    \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                    \n–¶–µ–Ω–∞: <b>${d.price}</b>`,
                    parse_mode: "HTML",
                    ...d.paid ? null : Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])),
                    ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É']), Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É')): null,
                })
            } else {
                ctx.reply(`–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
            \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
            \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
            \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
            \n–¶–µ–Ω–∞: <b>${d.price}</b>`, {
                    parse_mode: "HTML",
                    ...d.paid ? null : Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])),
                    ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É']), Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É')): null,
                });
            }
        });
    });
    await Order.find({ performerId: ctx.callbackQuery.from.id, status: true }).then(data => {
        data.map(async (d) => {
            if (d.imageId) {
                const link = await ctx.telegram.getFile(d.imageId);
                ctx.replyWithPhoto(`${link.file_id}`, {
                    caption: `–í—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                    \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                    \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                    \n–¶–µ–Ω–∞: <b>${d.price}</b>`,
                    parse_mode: "HTML",
                    // ...d.paid ? Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                    // ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                })
            } else {
                ctx.reply(`–í—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
            \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
            \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
            \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
            \n–¶–µ–Ω–∞: <b>${d.price}</b>`, {
                    parse_mode: "HTML",
                    // ...d.paid ? Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                    // ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                });
            }
        });
    });
});

bot.action('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', async ctx => {
    await Order.find({ userId: ctx.callbackQuery.from.id, status: false }).then(data => {
        data.map(async (d) => {
            if (d.imageId) {
                const link = await ctx.telegram.getFile(d.imageId);
                ctx.replyWithPhoto(`${link.file_id}`, {
                    caption: `–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                    \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                    \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                    \n–¶–µ–Ω–∞: <b>${d.price}</b>`,
                    parse_mode: "HTML",
                    // ...d.paid ? Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                    // ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                })
            } else {
                ctx.reply(`–í—ã –∑–∞–∫–∞–∑—á–∏–∫
                \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
            \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
            \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
            \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
            \n–¶–µ–Ω–∞: <b>${d.price}</b>`, {
                    parse_mode: "HTML",
                    // ...d.paid ? Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                    // ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                });
            }
        });
    });
    await Order.find({ performerId: ctx.callbackQuery.from.id, status: false }).then(data => {
        data.map(async (d) => {
            if (d.imageId) {
                const link = await ctx.telegram.getFile(d.imageId);
                ctx.replyWithPhoto(`${link.file_id}`, {
                    caption: `–í—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                    \n–°—Ç–∞—Ç—É—Å: ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
                    \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
                    \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
                    \n–¶–µ–Ω–∞: <b>${d.price}</b>`,
                    parse_mode: "HTML",
                    // ...d.paid ? Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                    // ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                })
            } else {
                ctx.reply(`–í—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                \n–°—Ç–∞—Ç—É—Å ${d.status ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}, 
            \n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:  <b>${d.name}</b>, 
            \n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: <b>${d.description}</b>, 
            \n–î–µ–¥–ª–∞–π–Ω: <b>${d.deadline}</b>, 
            \n–¶–µ–Ω–∞: <b>${d.price}</b>`, {
                    parse_mode: "HTML",
                    // ...d.paid ? Markup.inlineKeyboard(Markup.button.callback(['üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                    // ...d.status ? Markup.inlineKeyboard(Markup.button.callback(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'])) : null,
                });
            }
        });
    });
});

bot.hears('üíé –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', async ctx => {
    let money = 0;
    await Order.find({ performerId: ctx.message.from.id, status: false, moneyOut: false }).then(data => {
        data.map(d => {
            money += Number(d.price);
        })
    })
    ctx.reply("–í–∞—à –±–∞–ª–∞–Ω—Å: " + money, Markup.inlineKeyboard([Markup.button.callback('üí∞ –í—ã–≤–µ—Å—Ç–∏', 'üí∞ –í—ã–≤–µ—Å—Ç–∏')]));
})

bot.command('payout', async ctx => {
    let money = 0;
    await Order.find({ performerId: ctx.message.from.id, status: false, moneyOut: false }).then(data => {
        data.map(d => {
            money += Number(d.price);
        })
    })
    ctx.reply("–í–∞—à –±–∞–ª–∞–Ω—Å: " + money, Markup.inlineKeyboard([Markup.button.callback('üí∞ –í—ã–≤–µ—Å—Ç–∏', 'üí∞ –í—ã–≤–µ—Å—Ç–∏')]));
});

bot.action('üí∞ –í—ã–≤–µ—Å—Ç–∏', ctx => {
    ctx.scene.enter('payout');
});

bot.action('‚úÖ –ó–∞–±—Ä–∞–ª–∏', ctx => {

});

bot.hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', ctx => {
    ctx.scene.enter('close');
})

bot.command('close', ctx => {
    ctx.scene.enter('close');
});

bot.hears('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É', ctx => {
    ctx.scene.enter('pay');
})

bot.command('pay', (ctx) => {
    ctx.scene.enter("pay");
});

bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true)); // –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ

bot.on('successful_payment', async (ctx, next) => { // –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    await Order.findByIdAndUpdate(ctx.session.id, { paid: true }).then(data => {
        ctx.reply('–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ');
        ctx.telegram.sendMessage(data.performerId, "–ó–∞–∫–∞–∑—á–∏–∫ –æ–ø–ª–∞—Ç–∏–ª –∑–∞–¥–∞—á—É, –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.");
    });
});

bot.command('help', ctx => {
    ctx.reply('/start\n/help\n/pay\n/close\n/payout\n/admin');
});

bot.hears('üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', ctx => {
    ctx.reply("–ó–∞ –ø–æ–º–æ—â—å—é –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Supp_freelance_bot");
})

bot.command('admin', ctx => {
    ctx.reply("–ó–∞ –ø–æ–º–æ—â—å—é –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Supp_freelance_bot");
})

bot.command('confirm', ctx => {
    ctx.scene.enter('confirm');
})

bot.command('start', (ctx) => {
    ctx.reply("–ü—Ä–∏–≤–µ—Ç", main_keyboard);
});

bot.hears("üóí –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", (ctx) => {
    Order.find({ userId: ctx.message.from.id, status: true }).then(data => {
        if (data.length > 3) {
            ctx.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ 3. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏");
        }
        else {
            ctx.scene.enter("name");
        }
    });
});

bot.on('message', (ctx) => ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n/help'));
bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

app.listen(process.env.PORT);
// TODO: rating